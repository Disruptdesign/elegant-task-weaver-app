
import { useCallback } from 'react';
import { useAlgorithmicScheduler } from './useAlgorithmicScheduler';
import { Task, Event } from '../types/task';

export function useUnifiedRescheduler() {
  const { rescheduleAllTasks, isScheduling } = useAlgorithmicScheduler();

  const performUnifiedReschedule = useCallback(async (
    tasks: Task[],
    events: Event[],
    projects: any[] = [],
    onTasksUpdate: (tasks: Task[]) => void
  ) => {
    console.log('üîÑ UNIFICATION GLOBALE: Replanification avec contraintes canStartFrom STRICTEMENT PR√âSERV√âES');
    console.log('üìä Donn√©es pour replanification unifi√©e:', {
      tasks: tasks.length,
      events: events.length,
      projects: projects.length
    });

    try {
      // CORRECTION CRITIQUE: Forcer la replanification en mode STRICT avec pr√©servation des contraintes
      const rescheduledTasks = await rescheduleAllTasks(tasks, events, projects, {
        autoSchedule: true,
        workingHours: {
          start: "09:00",
          end: "18:00"
        },
        bufferBetweenTasks: 15,
        allowWeekends: false
      });
      
      // V√âRIFICATION CRITIQUE: S'assurer qu'aucune t√¢che ne viole sa contrainte canStartFrom
      const correctedTasks = rescheduledTasks.map(task => {
        if (task.canStartFrom && task.scheduledStart) {
          const canStartFromDate = new Date(task.canStartFrom);
          const scheduledStartDate = new Date(task.scheduledStart);
          
          if (scheduledStartDate < canStartFromDate) {
            console.log('üö® CORRECTION FORC√âE: T√¢che', task.title, 'programm√©e avant sa contrainte');
            console.log('   Programm√©e √†:', scheduledStartDate.toLocaleString());
            console.log('   Contrainte √†:', canStartFromDate.toLocaleString());
            
            // Corriger en reprogrammant √† la date de contrainte minimum
            return {
              ...task,
              scheduledStart: canStartFromDate,
              scheduledEnd: new Date(canStartFromDate.getTime() + task.estimatedDuration * 60000)
            };
          }
        }
        return task;
      });
      
      // Appliquer les mises √† jour pour chaque t√¢che modifi√©e
      const updatedTasks = correctedTasks.map(task => {
        const originalTask = tasks.find(t => t.id === task.id);
        if (originalTask) {
          // V√©rifier s'il y a des changements dans la planification
          const hasSchedulingChanges = 
            task.scheduledStart !== originalTask.scheduledStart ||
            task.scheduledEnd !== originalTask.scheduledEnd;
          
          if (hasSchedulingChanges) {
            console.log('üîÑ UNIFICATION: Mise √† jour t√¢che:', task.title, {
              avant: originalTask.scheduledStart ? new Date(originalTask.scheduledStart).toLocaleString() : 'non programm√©e',
              apr√®s: task.scheduledStart ? new Date(task.scheduledStart).toLocaleString() : 'non programm√©e',
              constraintRespected: task.canStartFrom ? 'contrainte canStartFrom V√âRIFI√âE ET RESPECT√âE' : 'aucune contrainte'
            });
          }
        }
        return task;
      });

      onTasksUpdate(updatedTasks);
      console.log('‚úÖ UNIFICATION GLOBALE: Replanification termin√©e avec contraintes STRICTEMENT respect√©es');
      
      return updatedTasks;
    } catch (error) {
      console.error('‚ùå UNIFICATION GLOBALE: Erreur lors de la replanification:', error);
      throw error;
    }
  }, [rescheduleAllTasks]);

  return {
    performUnifiedReschedule,
    isScheduling
  };
}

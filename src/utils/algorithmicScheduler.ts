
import { Task, Event } from '../types/task';
import { addMinutes, startOfDay, endOfDay, isAfter, isBefore, isWithinInterval, addDays, format } from 'date-fns';

interface TimeSlot {
  start: Date;
  end: Date;
  available: boolean;
  event?: Event;
}

interface SchedulingOptions {
  workingHours: {
    start: string; // "09:00"
    end: string;   // "18:00"
  };
  bufferBetweenTasks: number; // minutes
  maxTasksPerDay: number;
  allowWeekends: boolean;
}

const DEFAULT_OPTIONS: SchedulingOptions = {
  workingHours: {
    start: "09:00",
    end: "18:00"
  },
  bufferBetweenTasks: 15,
  maxTasksPerDay: 8,
  allowWeekends: false
};

export class AlgorithmicScheduler {
  private events: Event[];
  private options: SchedulingOptions;
  private projects: any[]; // Will be passed from the calling context

  constructor(events: Event[], options: Partial<SchedulingOptions> = {}, projects: any[] = []) {
    this.events = events;
    this.options = { ...DEFAULT_OPTIONS, ...options };
    this.projects = projects;
  }

  /**
   * V√©rifie si une t√¢che est actuellement en cours d'ex√©cution
   */
  private isTaskInProgress(task: Task): boolean {
    if (!task.scheduledStart || task.completed) {
      return false;
    }
    
    const now = new Date();
    const taskStart = new Date(task.scheduledStart);
    const taskEnd = task.scheduledEnd ? new Date(task.scheduledEnd) : addMinutes(taskStart, task.estimatedDuration);
    
    // Une t√¢che est en cours si elle a commenc√© mais n'est pas finie
    const inProgress = taskStart <= now && taskEnd > now;
    
    if (inProgress) {
      console.log('üîí T√¢che en cours d√©tect√©e (PROT√âG√âE):', task.title, 
        'd√©marr√©e √†', format(taskStart, 'dd/MM HH:mm'),
        'fin pr√©vue √†', format(taskEnd, 'HH:mm'));
    }
    
    return inProgress;
  }

  /**
   * CORRECTION MAJEURE: V√©rifie si une t√¢che est en retard UNIQUEMENT bas√© sur sa deadline
   * La date canStartFrom ne doit JAMAIS influencer le statut "en retard"
   */
  private isTaskOverdue(task: Task): boolean {
    if (task.completed || !task.deadline) return false;
    
    const now = new Date();
    const deadline = new Date(task.deadline);
    const isOverdue = deadline < now;
    
    if (isOverdue) {
      console.log('‚è∞ T√¢che en retard d√©tect√©e (DEADLINE D√âPASS√âE):', task.title, 'deadline √©tait', format(deadline, 'dd/MM HH:mm'));
    } else {
      // Debug pour les t√¢ches qui ne sont PAS en retard
      console.log('‚úÖ T√¢che dans les temps:', task.title, 'deadline', format(deadline, 'dd/MM HH:mm'));
      if (task.canStartFrom) {
        console.log('   canStartFrom:', format(task.canStartFrom, 'dd/MM HH:mm'), '(ne d√©termine PAS le statut en retard)');
      }
    }
    
    return isOverdue;
  }

  /**
   * CORRECTION MAJEURE: Valide les contraintes de projet sans affecter le statut "en retard"
   * S√©pare clairement les contraintes de planification et le calcul du retard
   */
  private applyProjectConstraints(task: Task): Task {
    if (!task.projectId) {
      return task;
    }

    const project = this.projects.find(p => p.id === task.projectId);
    if (!project) {
      console.warn('‚ö†Ô∏è Projet introuvable pour la t√¢che:', task.title, 'projectId:', task.projectId);
      return task;
    }

    const projectStart = new Date(project.startDate);
    const projectEnd = new Date(project.deadline);
    const taskDeadline = new Date(task.deadline);
    const now = new Date();

    console.log('üéØ Application contraintes projet pour:', task.title);
    console.log('   Projet:', project.title, format(projectStart, 'dd/MM'), '-', format(projectEnd, 'dd/MM'));
    console.log('   T√¢che deadline originale:', format(taskDeadline, 'dd/MM'));
    
    // CLARIFICATION : Afficher les contraintes existantes
    if (task.canStartFrom) {
      console.log('   Contrainte canStartFrom existante:', format(task.canStartFrom, 'dd/MM HH:mm'));
    }

    let updatedTask = { ...task };

    // CONTRAINTE 1: Ajuster la deadline si n√©cessaire (mais sans affecter le statut en retard)
    // Note : Cette contrainte ne change que la planification future, pas le calcul du retard
    if (taskDeadline > projectEnd) {
      updatedTask.deadline = projectEnd;
      console.log('üìÖ Deadline t√¢che ajust√©e √† la fin du projet:', format(projectEnd, 'dd/MM'));
      console.log('   ‚ö†Ô∏è IMPORTANT: Cet ajustement ne change pas le statut "en retard" de la t√¢che');
    }

    if (new Date(updatedTask.deadline) < projectStart) {
      updatedTask.deadline = projectStart;
      console.log('üìÖ Deadline t√¢che ajust√©e au d√©but du projet:', format(projectStart, 'dd/MM'));
      console.log('   ‚ö†Ô∏è IMPORTANT: Cet ajustement ne change pas le statut "en retard" de la t√¢che');
    }

    // CONTRAINTE 2 CORRIG√âE : Calculer la date de d√©but effective pour la PLANIFICATION SEULEMENT
    // Cette contrainte ne doit JAMAIS affecter si une t√¢che est consid√©r√©e comme "en retard"
    const constraints = [
      projectStart.getTime(),                           // Contrainte projet
      task.canStartFrom?.getTime() || projectStart.getTime(),  // Contrainte t√¢che (si elle existe)
      now.getTime()                                     // Contrainte temps (maintenant)
    ];

    // PRENDRE LA DATE LA PLUS RESTRICTIVE (la plus tardive) POUR LA PLANIFICATION
    const effectiveEarliestStart = Math.max(...constraints);
    updatedTask.canStartFrom = new Date(effectiveEarliestStart);

    console.log('üöÄ Date de d√©but effective calcul√©e (PLANIFICATION SEULEMENT - ne d√©termine PAS le retard):', format(updatedTask.canStartFrom, 'dd/MM HH:mm'));
    console.log('   - Contrainte projet (d√©but):', format(projectStart, 'dd/MM HH:mm'));
    console.log('   - Contrainte t√¢che (canStartFrom):', task.canStartFrom ? format(task.canStartFrom, 'dd/MM HH:mm') : 'aucune');
    console.log('   - Contrainte temps (maintenant):', format(now, 'dd/MM HH:mm'));
    console.log('   - R√âSULTAT FINAL (le plus restrictif pour PLANIFICATION):', format(updatedTask.canStartFrom, 'dd/MM HH:mm'));
    console.log('   ‚úÖ RAPPEL: Le statut "en retard" d√©pend UNIQUEMENT de la deadline:', format(updatedTask.deadline, 'dd/MM HH:mm'));

    return updatedTask;
  }

  /**
   * R√©sout les d√©pendances des t√¢ches et retourne un ordre de planification valide
   */
  private resolveDependencies(tasks: Task[]): Task[] {
    console.log('üîó R√©solution des d√©pendances pour', tasks.length, 't√¢ches');
    
    const resolved: Task[] = [];
    const visited = new Set<string>();
    const visiting = new Set<string>();
    
    const visit = (task: Task): boolean => {
      if (visiting.has(task.id)) {
        console.warn('‚ö†Ô∏è D√©pendance circulaire d√©tect√©e pour la t√¢che:', task.title);
        return false;
      }
      
      if (visited.has(task.id)) {
        return true;
      }
      
      visiting.add(task.id);
      
      // Traiter les d√©pendances d'abord
      if (task.dependencies && task.dependencies.length > 0) {
        console.log('üìã T√¢che', task.title, 'd√©pend de', task.dependencies.length, 'autre(s) t√¢che(s)');
        
        for (const depId of task.dependencies) {
          const dependency = tasks.find(t => t.id === depId);
          if (dependency) {
            console.log('   ‚û°Ô∏è D√©pendance:', dependency.title);
            if (!visit(dependency)) {
              console.error('‚ùå Impossible de r√©soudre la d√©pendance:', dependency.title);
              visiting.delete(task.id);
              return false;
            }
          } else {
            console.warn('‚ö†Ô∏è D√©pendance introuvable:', depId, 'pour la t√¢che:', task.title);
          }
        }
      }
      
      visiting.delete(task.id);
      visited.add(task.id);
      resolved.push(task);
      
      return true;
    };
    
    // Visiter toutes les t√¢ches
    for (const task of tasks) {
      if (!visited.has(task.id)) {
        visit(task);
      }
    }
    
    console.log('‚úÖ Ordre de r√©solution des d√©pendances:');
    resolved.forEach((task, index) => {
      const deps = task.dependencies?.length || 0;
      const isOverdue = this.isTaskOverdue(task);
      const overdueMsg = isOverdue ? ' (EN RETARD - priorit√© conserv√©e)' : '';
      console.log(`   ${index + 1}. ${task.title} ${deps > 0 ? `(d√©pend de ${deps} t√¢che(s))` : '(aucune d√©pendance)'}${overdueMsg}`);
    });
    
    return resolved;
  }

  /**
   * Calcule la date de d√©but la plus t√¥t possible pour une t√¢che en fonction de ses d√©pendances et contraintes
   * CORRECTION MAJEURE: Respecter ABSOLUMENT la contrainte canStartFrom
   */
  private calculateEarliestStart(task: Task, completedTasks: Task[], scheduledTasks: Task[]): Date {
    const now = new Date();
    let earliestStart = now;
    
    // V√âRIFICATION INITIALE de la contrainte canStartFrom
    if (task.canStartFrom) {
      console.log('üîí CONTRAINTE ABSOLUE d√©tect√©e pour', task.title, ':', format(task.canStartFrom, 'dd/MM HH:mm'));
      earliestStart = new Date(Math.max(task.canStartFrom.getTime(), now.getTime()));
    }
    
    // CONTRAINTE 2: V√©rifier les d√©pendances - MAIS JAMAIS avant canStartFrom
    if (task.dependencies && task.dependencies.length > 0) {
      console.log('üîó Calcul de la date de d√©but pour', task.title, 'avec', task.dependencies.length, 'd√©pendance(s)');
      
      for (const depId of task.dependencies) {
        // Chercher dans les t√¢ches termin√©es
        const completedDep = completedTasks.find(t => t.id === depId && t.completed);
        if (completedDep) {
          console.log('   ‚úÖ D√©pendance termin√©e:', completedDep.title);
          continue;
        }
        
        // Chercher dans les t√¢ches programm√©es
        const scheduledDep = scheduledTasks.find(t => t.id === depId && t.scheduledEnd);
        if (scheduledDep && scheduledDep.scheduledEnd) {
          const depEnd = new Date(scheduledDep.scheduledEnd);
          const depEndWithBuffer = addMinutes(depEnd, this.options.bufferBetweenTasks);
          
          // CORRECTION MAJEURE: Respecter canStartFrom m√™me pour les d√©pendances
          const effectiveDepEnd = task.canStartFrom ? 
            new Date(Math.max(depEndWithBuffer.getTime(), task.canStartFrom.getTime())) : 
            depEndWithBuffer;
          
          if (effectiveDepEnd > earliestStart) {
            earliestStart = effectiveDepEnd;
            console.log('   ‚è∞ D√©pendance programm√©e:', scheduledDep.title, 
              'se termine √†', format(depEnd, 'dd/MM HH:mm'),
              'mais contrainte canStartFrom appliqu√©e, d√©but √†', format(earliestStart, 'dd/MM HH:mm'));
          }
        } else {
          console.warn('   ‚ö†Ô∏è D√©pendance non programm√©e:', depId);
        }
      }
    }
    
    // V√âRIFICATION FINALE: S'assurer que canStartFrom est TOUJOURS respect√©
    if (task.canStartFrom && earliestStart < task.canStartFrom) {
      console.log('üö® CORRECTION: La date calcul√©e', format(earliestStart, 'dd/MM HH:mm'), 
        'est avant canStartFrom', format(task.canStartFrom, 'dd/MM HH:mm'), '- APPLICATION FORC√âE');
      earliestStart = task.canStartFrom;
    }
    
    console.log('üéØ Date de d√©but FINALE calcul√©e pour', task.title, ':', format(earliestStart, 'dd/MM HH:mm'));
    return earliestStart;
  }

  /**
   * Planifie automatiquement les t√¢ches selon leur priorit√©, deadline et d√©pendances
   */
  scheduleTasks(tasks: Task[], isRescheduling: boolean = false): Task[] {
    console.log('ü§ñ D√©but de la planification algorithmique pour', tasks.length, 't√¢ches');
    
    const now = new Date();
    console.log('‚è∞ Heure actuelle de r√©f√©rence:', format(now, 'dd/MM/yyyy HH:mm:ss'));
    
    // S√©parer les t√¢ches selon leur statut avec protection des t√¢ches en cours
    let protectedTasks: Task[] = [];
    let tasksToSchedule: Task[] = [];

    if (isRescheduling) {
      console.log('üîÑ MODE REPLANIFICATION AGGRESSIVE avec protection des t√¢ches en cours');
      
      // PROTECTION ABSOLUE : Figer les t√¢ches termin√©es ET les t√¢ches en cours
      protectedTasks = tasks.filter(task => task.completed || this.isTaskInProgress(task));
      
      // S√©parer les t√¢ches en cours pour un traitement sp√©cial
      const completedTasks = protectedTasks.filter(task => task.completed);
      const tasksInProgress = protectedTasks.filter(task => this.isTaskInProgress(task));
      
      // TOUTES les autres t√¢ches seront replanifi√©es (y compris les t√¢ches en retard)
      const otherTasks = tasks.filter(task => !task.completed && !this.isTaskInProgress(task));
      
      // Appliquer les contraintes de projet AVANT la planification
      tasksToSchedule = otherTasks.map(task => {
        const taskWithProjectConstraints = this.applyProjectConstraints(task);
        return {
          ...taskWithProjectConstraints,
          scheduledStart: undefined,
          scheduledEnd: undefined
        };
      });
      
      console.log('üîí T√¢ches prot√©g√©es (termin√©es):', completedTasks.length);
      console.log('üîí T√¢ches prot√©g√©es (EN COURS - INTOUCHABLES):', tasksInProgress.length);
      console.log('üîÑ T√¢ches √† replanifier (incluant celles en retard):', tasksToSchedule.length);
      
      // CORRECTION : Compter les t√¢ches en retard CORRECTEMENT (deadline d√©pass√©e seulement)
      const overdueTasks = tasksToSchedule.filter(task => this.isTaskOverdue(task));
      console.log('‚è∞ T√¢ches VRAIMENT en retard √† replanifier (deadline d√©pass√©e):', overdueTasks.length);
      
      // Afficher les d√©tails des t√¢ches en cours prot√©g√©es
      tasksInProgress.forEach(task => {
        const taskStart = new Date(task.scheduledStart!);
        const taskEnd = task.scheduledEnd ? new Date(task.scheduledEnd) : addMinutes(taskStart, task.estimatedDuration);
        console.log(`   üîí "${task.title}" : ${format(taskStart, 'dd/MM HH:mm')} - ${format(taskEnd, 'HH:mm')} (EN COURS)`);
      });
      
    } else {
      // Mode planification normale avec protection des t√¢ches en cours
      // CORRECTION : Inclure SEULEMENT les t√¢ches vraiment en retard (deadline d√©pass√©e)
      const tasksNeedingScheduling = tasks.filter(task => (!task.scheduledStart || this.isTaskOverdue(task)) && !task.completed);
      
      // Appliquer les contraintes de projet AVANT la planification
      tasksToSchedule = tasksNeedingScheduling.map(task => {
        const taskWithProjectConstraints = this.applyProjectConstraints(task);
        return {
          ...taskWithProjectConstraints,
          scheduledStart: undefined,
          scheduledEnd: undefined
        };
      });
      
      // V√©rifier les t√¢ches d√©j√† programm√©es pour les conflits ou probl√®mes
      const alreadyScheduled = tasks.filter(task => task.scheduledStart && !task.completed && !this.isTaskOverdue(task));
      const validScheduledTasks: Task[] = [];
      
      alreadyScheduled.forEach(task => {
        // PROTECTION ABSOLUE : Ne jamais toucher aux t√¢ches en cours
        if (this.isTaskInProgress(task)) {
          console.log('üîí T√¢che en cours PROT√âG√âE (ne sera pas replanifi√©e):', task.title);
          validScheduledTasks.push(task);
          return;
        }
        
        const taskStart = new Date(task.scheduledStart!);
        
        // R√àGLE 1: V√©rifier si la t√¢che est dans le pass√© (sauf si en cours)
        if (taskStart < now) {
          console.log('‚è∞ T√¢che d√©pass√©e d√©tect√©e:', task.title, '√©tait √†', format(taskStart, 'dd/MM HH:mm'));
          const taskWithConstraints = this.applyProjectConstraints(task);
          tasksToSchedule.push({
            ...taskWithConstraints,
            scheduledStart: undefined,
            scheduledEnd: undefined
          });
        } else {
          // R√àGLE 2: V√©rifier les conflits avec les √©v√©nements
          const conflictingEvent = this.findConflictingEvent(task, this.events);
          
          if (conflictingEvent) {
            console.log('‚ö†Ô∏è T√¢che programm√©e en conflit avec un √©v√©nement:', task.title);
            console.log('üîÑ La t√¢che sera replanifi√©e apr√®s l\'√©v√©nement:', conflictingEvent.title);
            
            // Ajouter la t√¢che √† replanifier avec une contrainte pour commencer apr√®s l'√©v√©nement
            const taskWithConstraints = this.applyProjectConstraints({
              ...task,
              canStartFrom: addMinutes(new Date(conflictingEvent.endDate), this.options.bufferBetweenTasks)
            });
            
            tasksToSchedule.push({
              ...taskWithConstraints,
              scheduledStart: undefined,
              scheduledEnd: undefined
            });
          } else {
            validScheduledTasks.push(task);
          }
        }
      });
      
      // Ajouter les t√¢ches d√©j√† termin√©es
      protectedTasks = [...tasks.filter(task => task.completed), ...validScheduledTasks];
      
      console.log('üìã T√¢ches √† programmer:', tasksToSchedule.length);
      console.log('‚úÖ T√¢ches prot√©g√©es (compl√©t√©es/programm√©es sans conflit):', protectedTasks.length);
    }

    // R√©soudre les d√©pendances et trier les t√¢ches
    const resolvedTasks = this.resolveDependencies(tasksToSchedule);
    const sortedTasks = this.prioritizeTasks(resolvedTasks);
    
    // Programmer chaque t√¢che √† partir de maintenant
    const newlyScheduledTasks: Task[] = [];
    const startDate = now; // Commencer √† partir de maintenant
    const endDate = addDays(startDate, 30); // Planifier sur 30 jours

    console.log(`üéØ Planification de ${sortedTasks.length} t√¢che(s) par ordre de priorit√© et d√©pendances...`);

    for (const task of sortedTasks) {
      // Calculer la date de d√©but la plus t√¥t possible en fonction des d√©pendances et contraintes
      const earliestStart = this.calculateEarliestStart(task, protectedTasks, [...protectedTasks, ...newlyScheduledTasks]);
      
      // S'assurer que la contrainte projet est respect√©e
      const effectiveEarliestStart = Math.max(
        earliestStart.getTime(),
        task.canStartFrom?.getTime() || earliestStart.getTime()
      );
      
      const scheduledTask = this.scheduleTask(
        { ...task, canStartFrom: new Date(effectiveEarliestStart) }, 
        startDate, 
        endDate, 
        [...protectedTasks, ...newlyScheduledTasks]
      );
      
      if (scheduledTask) {
        newlyScheduledTasks.push(scheduledTask);
        // CORRECTION : Affichage plus pr√©cis du statut
        const isReallyOverdue = this.isTaskOverdue(task);
        const overdueNote = isReallyOverdue ? ' (√©tait VRAIMENT en retard - deadline d√©pass√©e)' : '';
        const projectNote = task.projectId ? ' (contraintes projet appliqu√©es)' : '';
        console.log('‚úÖ T√¢che programm√©e:', task.title, '√†', format(scheduledTask.scheduledStart!, 'dd/MM HH:mm') + overdueNote + projectNote);
      } else {
        console.log('‚ùå Impossible de programmer:', task.title);
        newlyScheduledTasks.push(task); // Garder la t√¢che m√™me si non programm√©e
      }
    }

    const result = [...protectedTasks, ...newlyScheduledTasks];
    
    // CORRECTION : Statistiques plus pr√©cises
    const reallyOverdueTasks = result.filter(t => this.isTaskOverdue(t));
    
    console.log('üìä R√©sum√© de la planification avec contraintes projet CORRIG√âES:');
    console.log(`   - T√¢ches trait√©es: ${result.length}`);
    console.log(`   - T√¢ches programm√©es: ${result.filter(t => t.scheduledStart && !t.completed).length}`);
    console.log(`   - T√¢ches non programm√©es: ${result.filter(t => !t.scheduledStart && !t.completed).length}`);
    console.log(`   - T√¢ches termin√©es: ${result.filter(t => t.completed).length}`);
    console.log(`   - T√¢ches en cours (prot√©g√©es): ${result.filter(t => this.isTaskInProgress(t)).length}`);
    console.log(`   - T√¢ches VRAIMENT en retard (deadline d√©pass√©e): ${reallyOverdueTasks.length}`);
    console.log(`   - T√¢ches avec d√©pendances: ${result.filter(t => t.dependencies && t.dependencies.length > 0).length}`);
    console.log(`   - T√¢ches li√©es √† des projets: ${result.filter(t => t.projectId).length}`);

    return result;
  }

  /**
   * Trouve l'√©v√©nement qui entre en conflit avec une t√¢che
   */
  private findConflictingEvent(task: Task, events: Event[]): Event | null {
    if (!task.scheduledStart || !task.scheduledEnd) return null;
    
    const taskStart = new Date(task.scheduledStart);
    const taskEnd = new Date(task.scheduledEnd);
    
    for (const event of events) {
      if (event.allDay) continue; // Ignorer les √©v√©nements toute la journ√©e
      
      const eventStart = new Date(event.startDate);
      const eventEnd = new Date(event.endDate);
      
      // V√©rifier le chevauchement : deux cr√©neaux se chevauchent si l'un commence avant que l'autre se termine
      const hasOverlap = taskStart < eventEnd && taskEnd > eventStart;
      
      if (hasOverlap) {
        console.log('üö´ Conflit d√©tect√© entre t√¢che', task.title, 'et √©v√©nement', event.title);
        console.log('   T√¢che:', format(taskStart, 'dd/MM HH:mm'), '-', format(taskEnd, 'HH:mm'));
        console.log('   √âv√©nement:', format(eventStart, 'dd/MM HH:mm'), '-', format(eventEnd, 'HH:mm'));
        return event;
      }
    }
    
    return null;
  }

  /**
   * V√©rifie si une t√¢che est en conflit avec des √©v√©nements (version simplifi√©e pour validation)
   */
  private checkEventConflict(task: Task, events: Event[]): boolean {
    return this.findConflictingEvent(task, events) !== null;
  }

  /**
   * Trie les t√¢ches par priorit√© et proximit√© de deadline (les t√¢ches en retard conservent leur priorit√© originale)
   */
  private prioritizeTasks(tasks: Task[]): Task[] {
    const priorityWeight = {
      'urgent': 4,
      'high': 3,
      'medium': 2,
      'low': 1
    };

    return tasks.sort((a, b) => {
      // D'abord par priorit√© (les t√¢ches en retard conservent leur priorit√© originale)
      const priorityDiff = priorityWeight[b.priority] - priorityWeight[a.priority];
      if (priorityDiff !== 0) return priorityDiff;

      // Ensuite par deadline (plus proche = plus prioritaire)
      return new Date(a.deadline).getTime() - new Date(b.deadline).getTime();
    });
  }

  /**
   * Programme une t√¢che sp√©cifique dans le premier cr√©neau disponible
   * CORRECTION ABSOLUE: Respecter strictement la contrainte canStartFrom
   */
  private scheduleTask(task: Task, startDate: Date, endDate: Date, existingTasks: Task[]): Task | null {
    console.log('üîç Recherche de cr√©neau pour:', task.title, '(dur√©e:', task.estimatedDuration, 'min)');
    
    // V√âRIFICATION PR√âALABLE de la contrainte canStartFrom
    if (task.canStartFrom) {
      console.log('üîí CONTRAINTE D√âTECT√âE "peut commencer √† partir de":', format(task.canStartFrom, 'dd/MM HH:mm'));
    }
    
    const now = new Date();
    
    // CORRECTION ABSOLUE: La contrainte canStartFrom est PRIORITAIRE sur tout
    let effectiveStartTime = Math.max(
      startDate.getTime(),
      now.getTime() // Jamais avant maintenant
    );
    
    // CONTRAINTE ABSOLUE: Si canStartFrom est d√©fini, il est IMP√âRATIF
    if (task.canStartFrom) {
      effectiveStartTime = Math.max(effectiveStartTime, task.canStartFrom.getTime());
      console.log('üîí CONTRAINTE ABSOLUE APPLIQU√âE "peut commencer √† partir de":', format(new Date(effectiveStartTime), 'dd/MM HH:mm'));
    }
    
    let currentDate = new Date(effectiveStartTime);
    
    console.log('‚è∞ Recherche de cr√©neau √† partir de (CONTRAINTE RESPECT√âE):', format(currentDate, 'dd/MM HH:mm'));
    
    // Chercher jour par jour jusqu'√† la deadline (avec extension possible si en retard)
    const searchEndDate = this.isTaskOverdue(task) ? endDate : task.deadline;
    
    while (currentDate <= endDate && currentDate <= searchEndDate) {
      // V√©rifier si c'est un jour de travail
      if (!this.isWorkingDay(currentDate)) {
        currentDate = addDays(currentDate, 1);
        continue;
      }

      // Obtenir les cr√©neaux disponibles pour ce jour
      const availableSlots = this.getAvailableSlots(currentDate, existingTasks);
      
      // Chercher un cr√©neau assez long
      for (const slot of availableSlots) {
        // CORRECTION ABSOLUE: Le cr√©neau DOIT respecter la contrainte
        const adjustedSlotStart = new Date(Math.max(slot.start.getTime(), effectiveStartTime));
        
        if (adjustedSlotStart >= slot.end) {
          continue; // Le cr√©neau est enti√®rement avant notre contrainte
        }
        
        const availableSlotEnd = slot.end;
        const slotDuration = (availableSlotEnd.getTime() - adjustedSlotStart.getTime()) / (1000 * 60);
        
        if (slotDuration >= task.estimatedDuration) {
          // Cr√©neau trouv√© !
          const scheduledStart = adjustedSlotStart;
          const scheduledEnd = addMinutes(scheduledStart, task.estimatedDuration);
          
          // V√âRIFICATION FINALE ABSOLUE: La t√¢che ne commence PAS avant canStartFrom
          if (task.canStartFrom && scheduledStart < task.canStartFrom) {
            console.log('üö® ERREUR: Tentative de programmer avant canStartFrom - REJET du cr√©neau');
            continue;
          }
          
          // V√âRIFICATION FINALE : S'assurer qu'il n'y a pas de conflit avec les √©v√©nements
          const testTask: Task = {
            ...task,
            scheduledStart,
            scheduledEnd
          };
          
          if (this.checkEventConflict(testTask, this.events)) {
            console.log('üö´ Cr√©neau trouv√© mais en conflit avec un √©v√©nement, passage au suivant');
            continue;
          }
          
          console.log('‚úÖ Cr√©neau valid√© (CONTRAINTE RESPECT√âE + sans conflit):', format(scheduledStart, 'dd/MM HH:mm'), '-', format(scheduledEnd, 'HH:mm'));
          
          return {
            ...task,
            scheduledStart,
            scheduledEnd,
            canStartFrom: undefined // Nettoyer la contrainte une fois la t√¢che programm√©e
          };
        }
      }
      
      currentDate = addDays(currentDate, 1);
    }

    console.log('‚ùå Aucun cr√©neau valide trouv√© pour:', task.title, '(contrainte canStartFrom respect√©e)');
    return null;
  }

  /**
   * Obtient les cr√©neaux disponibles pour un jour donn√©
   * MODIFICATION: Exclut les t√¢ches termin√©es du calcul des cr√©neaux occup√©s
   */
  private getAvailableSlots(date: Date, existingTasks: Task[]): TimeSlot[] {
    const dayStart = this.getWorkingDayStart(date);
    const dayEnd = this.getWorkingDayEnd(date);
    
    // Collecter tous les √©l√©ments occup√©s (√©v√©nements + t√¢ches programm√©es NON TERMIN√âES)
    const occupiedSlots: TimeSlot[] = [];
    
    // Ajouter les √©v√©nements
    this.events.forEach(event => {
      const eventStart = new Date(event.startDate);
      const eventEnd = new Date(event.endDate);
      
      if (this.isDateInRange(eventStart, date) || this.isDateInRange(eventEnd, date)) {
        occupiedSlots.push({
          start: eventStart,
          end: eventEnd,
          available: false,
          event
        });
      }
    });
    
    // Ajouter SEULEMENT les t√¢ches NON TERMIN√âES d√©j√† programm√©es
    existingTasks.forEach(task => {
      // üéØ MODIFICATION CL√â : Ignorer les t√¢ches termin√©es lors du calcul des cr√©neaux occup√©s
      if (task.completed) {
        console.log('‚úÖ T√¢che termin√©e ignor√©e pour le calcul des cr√©neaux:', task.title);
        return;
      }
      
      if (task.scheduledStart && task.scheduledEnd) {
        const taskStart = new Date(task.scheduledStart);
        const taskEnd = new Date(task.scheduledEnd);
        
        if (this.isDateInRange(taskStart, date)) {
          occupiedSlots.push({
            start: taskStart,
            end: taskEnd,
            available: false
          });
        }
      }
    });

    // Trier par heure de d√©but
    occupiedSlots.sort((a, b) => a.start.getTime() - b.start.getTime());
    
    // Calculer les cr√©neaux libres
    const availableSlots: TimeSlot[] = [];
    let currentTime = dayStart;
    
    for (const occupied of occupiedSlots) {
      // S'il y a un gap avant cet √©l√©ment occup√©
      if (currentTime < occupied.start) {
        availableSlots.push({
          start: currentTime,
          end: occupied.start,
          available: true
        });
      }
      
      // Avancer apr√®s cet √©l√©ment + buffer
      currentTime = addMinutes(occupied.end, this.options.bufferBetweenTasks);
    }
    
    // Ajouter le cr√©neau final si il reste du temps
    if (currentTime < dayEnd) {
      availableSlots.push({
        start: currentTime,
        end: dayEnd,
        available: true
      });
    }
    
    return availableSlots.filter(slot => {
      const duration = (slot.end.getTime() - slot.start.getTime()) / (1000 * 60);
      return duration >= 30; // Minimum 30 minutes
    });
  }

  /**
   * V√©rifie si une date tombe dans un jour donn√©
   */
  private isDateInRange(dateToCheck: Date, referenceDate: Date): boolean {
    const start = startOfDay(referenceDate);
    const end = endOfDay(referenceDate);
    return isWithinInterval(dateToCheck, { start, end });
  }

  /**
   * V√©rifie si c'est un jour de travail
   */
  private isWorkingDay(date: Date): boolean {
    if (this.options.allowWeekends) return true;
    const dayOfWeek = date.getDay();
    return dayOfWeek >= 1 && dayOfWeek <= 5; // Lundi √† vendredi
  }

  /**
   * Obtient l'heure de d√©but de travail pour un jour
   */
  private getWorkingDayStart(date: Date): Date {
    const [hours, minutes] = this.options.workingHours.start.split(':').map(Number);
    const start = startOfDay(date);
    start.setHours(hours, minutes, 0, 0);
    return start;
  }

  /**
   * Obtient l'heure de fin de travail pour un jour
   */
  private getWorkingDayEnd(date: Date): Date {
    const [hours, minutes] = this.options.workingHours.end.split(':').map(Number);
    const end = startOfDay(date);
    end.setHours(hours, minutes, 0, 0);
    return end;
  }

  /**
   * Replanifie toutes les t√¢ches (utile apr√®s ajout/suppression d'√©v√©nement)
   */
  static rescheduleAll(tasks: Task[], events: Event[], options?: Partial<SchedulingOptions>, projects: any[] = []): Task[] {
    console.log('üîÑ Replanification compl√®te des t√¢ches avec protection des t√¢ches en cours et contraintes projet');
    const scheduler = new AlgorithmicScheduler(events, options, projects);
    
    // Utiliser le mode replanification pour respecter les contraintes
    return scheduler.scheduleTasks(tasks, true);
  }
}

/**
 * Fonction utilitaire pour programmer automatiquement les t√¢ches
 */
export function scheduleTasksAutomatically(
  tasks: Task[], 
  events: Event[], 
  options?: Partial<SchedulingOptions>,
  projects: any[] = []
): Task[] {
  const scheduler = new AlgorithmicScheduler(events, options, projects);
  return scheduler.scheduleTasks(tasks, false);
}

/**
 * Fonction pour replanifier apr√®s changement d'√©v√©nements
 */
export function rescheduleAfterEventChange(
  tasks: Task[], 
  events: Event[], 
  options?: Partial<SchedulingOptions>,
  projects: any[] = []
): Task[] {
  return AlgorithmicScheduler.rescheduleAll(tasks, events, options, projects);
}
